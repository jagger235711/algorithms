/*
描述
有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。你站在其中一块黑色的瓷砖上，只能向相邻的黑色瓷砖移动。请写一个程序，计算你总共能够到达多少块黑色的瓷砖。
输入
包括多个数据集合。每个数据集合的第一行是两个整数W和H，（w是x方向上的砖块数）分别表示x方向和y方向瓷砖的数量。W和H都不超过20。在接下来的H行中，每行包括W个字符。每个字符表示一块瓷砖的颜色，规则如下
1）‘.’：黑色的瓷砖；
2）‘#’：白色的瓷砖；
3）‘@’：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。
当在一行中读入的是两个零时，表示输入结束。
输出
对每个数据集合，分别输出一行，显示你从初始位置出发能到达的瓷砖数(记数时包括初始位置的瓷砖)。
样例输入
6 9
....#.
.....#
......
......
......
......
......
#@...#
.#..#.
0 0
样例输出
45
*/
//为什么一在函数中调用数组就不好用了？？
#include<iostream>
int w, h;
char block[21][21];
int find(int x, int y)
{
	if (x<0 || y<0 || x>=w || y>=h) return 0;
	else
	{
		if (block[x][y] == '#') return 0;
		else
		{
			block[x][y] = '#';
			return 1 + find(x - 1, y) + find(x + 1, y) + find(x, y - 1) + find(x, y + 1);
		}
	}
}
using namespace std;
int main()
{
	int x, y;
	while (cin >> w >> h && w != 0 && h != 0)
	{
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				cin >> block[i][j];
				if (block[i][j] == '@') x = i, y = j;
			}
		}
		cout << x << " " << y << endl;
		cout << find(x, y);
	}

	return 0;
}